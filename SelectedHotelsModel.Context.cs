//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SelectedHotelsModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SelectedHotelsEntities : DbContext
    {
        public SelectedHotelsEntities()
            : base("name=SelectedHotelsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Feed> Feeds { get; set; }
        public virtual DbSet<HotelType> HotelTypes { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<ProductSpec> ProductSpecs { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<MerchantCategory> MerchantCategories { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Style> Styles { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Colour> Colours { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<GeoName> GeoNames { get; set; }
        public virtual DbSet<TabHotel> TabHotels { get; set; }
    
        public virtual ObjectResult<Nullable<double>> Distance(Nullable<double> lon1, Nullable<double> lat1, Nullable<double> lon2, Nullable<double> lat2)
        {
            var lon1Parameter = lon1.HasValue ?
                new ObjectParameter("lon1", lon1) :
                new ObjectParameter("lon1", typeof(double));
    
            var lat1Parameter = lat1.HasValue ?
                new ObjectParameter("lat1", lat1) :
                new ObjectParameter("lat1", typeof(double));
    
            var lon2Parameter = lon2.HasValue ?
                new ObjectParameter("lon2", lon2) :
                new ObjectParameter("lon2", typeof(double));
    
            var lat2Parameter = lat2.HasValue ?
                new ObjectParameter("lat2", lat2) :
                new ObjectParameter("lat2", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Distance", lon1Parameter, lat1Parameter, lon2Parameter, lat2Parameter);
        }
    }
}
